points(air2008, type = "o")
?fitted
summary(ausair)
#3. Seasonal Trend
#Load the data
data("austourists")
# Read about the dataset!
?austourists
# Always plot the data first!
plot(austourists)
# returns a ts object.
aust = window(austourists,start = 1999, end = 2004)
#fit an additive and multiplicative model
fit1s = hw(aust,seasonal = "additive",h = 40)
fit2s = hw(aust,seasonal = "multiplicative",h = 40)
#Plot the original data
plot(aust,ylab = "Australian Tourists", xlab = "Year", type = "o", xlim = c(1999, 2014),ylim = c(15,60))
#add the fitted values from the model (of the training data)
lines(fitted(fit1s),col = "blue", type= "o")
lines(fitted(fit2s), col = "red", type= "o")
#Now add the forecasts (add these one at a time)
lines(fit1s$mean, col = "blue", type= "o")
lines(fit2s$mean,col = "red", type= "o")
#Compare the accuracy
accuracy(fit1s,austourists)
accuracy(fit2s,austourists)
#add the actual values to visually compare the forecasts to the actual values.
points(austourists, type = "o")
austourists
?hw
plot(aust,ylab = "Australian Tourists", xlab = "Year", type = "o", xlim = c(1999, 2014),ylim = c(15,60))
#3. Seasonal Trend
#Load the data
data("austourists")
# Read about the dataset!
?austourists
# Always plot the data first!
plot(austourists)
# returns a ts object.
aust = window(austourists,start = 1999, end = 2004)
#fit an additive and multiplicative model
fit1s = hw(aust,seasonal = "additive",h = 40)
fit2s = hw(aust,seasonal = "multiplicative",h = 40)
#Plot the original data
plot(aust,ylab = "Australian Tourists", xlab = "Year", type = "o", xlim = c(1999, 2014),ylim = c(15,60))
#add the fitted values from the model (of the training data)
lines(fitted(fit1s),col = "blue", type= "o")
lines(fitted(fit2s), col = "red", type= "o")
#Now add the forecasts (add these one at a time)
lines(fit1s$mean, col = "blue", type= "o")
lines(fit2s$mean,col = "red", type= "o")
#Compare the accuracy
accuracy(fit1s,austourists)
accuracy(fit2s,austourists)
#add the actual values to visually compare the forecasts to the actual values.
points(austourists, type = "o")
install.packages("fpp2")
library(fpp2)
data(maxtemp)
View(maxtemp)
summary(maxtemp)
View(maxtemp1)
maxtemp1 <- window(maxtemp, start = 1990, end = 2016)
View(maxtemp1)
?ses
#returns a ts object
temp = window(maxtemp1, start = 1990, end = 2021)
# Always plot the data first!
plot(maxtemp,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(maxtemp1, initial = "simple",alpha = .9,h = 10)
fit2 = ses(air,initial = "simple",alpha = .8, h = 12)
fit3 = ses(air, h = 3) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, ausair)
#returns a ts object
temp = window(maxtemp1, start = 1990, end = 2016)
# Always plot the data first!
plot(maxtemp,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(maxtemp1, initial = "simple",alpha = .9,h = 10)
fit2 = ses(air,initial = "simple",alpha = .8, h = 12)
fit3 = ses(air, h = 3) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, ausair)
#returns a ts object
temp = window(maxtemp1, start = 1990, end = 2016)
# Always plot the data first!
plot(maxtemp1,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(maxtemp1, initial = "simple",alpha = .9,h = 10)
fit2 = ses(air,initial = "simple",alpha = .8, h = 12)
fit3 = ses(air, h = 3) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, ausair)
maxtemp1 <- window(maxtemp, start = 1990, end = 2016)
View(maxtemp1)
temp1 <- data.frame(maxtemp1$year > 1990)
temp1 <- data.frame(as.factor(maxtemp1$year > 1990))
temp1 <- maxtemp %>% data.frame(as.factor(value > 1990))
temp1 <- maxtemp %>% data.frame(as.factor(value) > 1990)
#returns a ts object
temp1 <- maxtemp %>% data.frame(as.factor(name) > 1990)
#returns a ts object
temp1 <- maxtemp %>% data.frame(as.factor(Name) > 1990)
#returns a ts object
temp1 <- maxtemp %>% data.frame(as.factor(Name) >= 1990)
maxtemp$Name
maxtemp[maxtemp$Year] <- data.frame(maxtemp[Name])
str(maxtemp)
temp1 <- maxtemp[10:46]
temp1
temp1 <- -maxtemp[1:20]
temp1
temp1 <- maxtemp[20:46]
temp1
temp1 <- maxtemp[20:46]
temp1
temp = window(temp1, start = 1990, end = 2016)
#returns a ts object
temp1 <- maxtemp[20:46]
#temp1
temp = window(temp1, start = 1990, end = 2021)
temp <- window(temp1, start = 1990, end = 2021)
temp <- window(temp1, start = 1990, end = 2016)
temp <- window(temp1, start = 1971, end = 2016)
temp <- window(temp1, end = 2016, start = 1971)
temp <- window(temp1, end = 2016, start = 1971)
temp <- window(temp1, start = 1990, end = 2016)
some_result_ts <- ts(temp1,frequency=12,start=c(1990,26))
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,26))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
#returns a ts object
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,26))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp1,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(maxtemp, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, maxtemp)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,26))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
#returns a ts object
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,26))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(maxtemp, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, maxtemp)
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
plot(temp1,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,26))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
fit1 = ses(maxtemp, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
accuracy(fit1, maxtemp)
accuracy(fit1, temp2)
fit1 = ses(temp2, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, temp2)
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
plot(temp2,ylab = "Temperature in degrees Celsius", xlab = "Year", type = "o", xlim = c(1971, 2021),ylim = c(15,50), main = "Airline Passengers")
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,1))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990,1))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(temp2, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=c(1990))
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(temp2, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=(1990), end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(temp2, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, temp2)
?ts
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=1990, end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=1990, end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=1990, end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=1990, end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
#fit 3 different simple exponential smoothing models ... how are they different?
# what does the h paramter do?
fit1 = ses(temp2, initial = "simple",alpha = .9,h = 26)
fit2 = ses(temp2,initial = "simple",alpha = .8, h = 31)
fit3 = ses(temp2, h = 26) #defaults
# the forecast package has a nice accuracy funciton with various metrics just pass it the
# the model and the data!  (This is the "training" data)
accuracy(fit1, temp2)
plot(temp2,ylab = "Temperature in degrees Celsius", xlab = "Year", type = "o", xlim = c(1971, 2021),ylim = c(15,50), main = "Airline Passengers")
#Plot the estimated values from the models .. the "fitted" values are the training values.
lines(fitted(fit1), col = "blue", type = "o")
lines(fitted(fit2), col = "red", type = "o")
lines(fitted(fit3), col = "green", type = "o")
# the  $mean values are the forecasts.
lines(fit1$mean, col = "blue", type = "o")
lines(fit2$mean, col = "red", type = "o")
lines(fit3$mean, col = "green", type = "o")
# These are the actual values!  Compare visually with the forecasts!
temp_real = window(maxtemp, start = 1971, end = 2016)
points(temp_real, type = "o")
# Compare the forecasts with the actual values with various fit metrics.
accuracy(fit1, temp_real)
temp1 <- maxtemp[20:46]
#temp1
temp <- ts(temp1,frequency=12,start=1990, end = 2016)
temp2 <- window(temp, start = 1990, end = 2016)
View(temp2)
# Always plot the data first!
plot(temp2,ylab = "Temperature degrees Celsius", xlab = "Year", main = "Maximum temperatur in Melbourne, Australia in degrees Celsius by year")
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(dev = c('pdf', 'png'),
fig.align = 'center', fig.height = 5, fig.width = 8.5,
pdf.options(encoding = "ISOLatin9.enc"))
library(class)
library(caret)
library(e1071)
library(dplyr)
library(jsonlite)
library(ggplot2)
library(ggthemes)
library(tidyverse)
library(gridExtra)
CaseStudy2 = read.csv(file.choose(), header = TRUE)
View(CaseStudy2)
?read.csv
CaseStudy2 = read.csv(file.choose(), header = TRUE, sep = ",")
View(CaseStudy2)
CaseStudy2 = read.table(file.choose(), header = TRUE, sep = ",")
View(CaseStudy2)
CaseStudy2 = read.table(file.choose(), header = TRUE, sep = ",")
View(CaseStudy2)
CaseStudy2 = read.csv(file.choose(), header = TRUE, sep = ",")
View(CaseStudy2)
CS2 = read.csv_(file.choose(), header = TRUE, sep = ",")
CS2 = read.csv(file.choose(), header = TRUE, sep = ",")
View(CS2)
CS2 = read.csv(file.choose(), header = TRUE, sep = ",", quote = "\"",
dec = ".", fill = TRUE, comment.char = "")
View(CS2)
CS2 <- read.csv(file.choose(), header = TRUE, sep = ",")
View(CS2)
install.packages("xlsx")
library(xlsx)
#install.packages("xlsx")
library(xlsx)
install.packages("readxl")
library(readxl)
install.packages("readxl")
CS2 = readxl::read_excel(file.choose())
View(CS2)
working <- CS2 %>% filter(Attrition == "No")
View(working)
working <- CS2 %>% filter(Attrition == "No")
View(working)
notworking <- CS2 %>% filter(Attrition == "Yes")
View(notworking)
tenure1 <- max(CS2$YearsAtCompany)
tenure1
plot(Age ~ YearAtCompany, data = notworking)
A <- notworking %>% plot(Age ~ YearAtCompany)
notworking
hist(notworking$Age)
hist(notworking$Age)
hist(notworking$YearsAtCompany)
hist(notworking$Age, main = "Not Working and Age")
hist(notworking$YearsAtCompany, main = "Not working and Years at the Company")
hist(notworking$Age, main = "Not Working and Age")
hist(notworking$YearsAtCompany, main = "Not working and Years at the Company", xlab = "Age", ylab = "Number of employees lost")
hist(notworking$Age, main = "Age when employment ended", xlab = "Age", ylab = "Number of employees lost")
hist(notworking$YearsAtCompany, main = "Years at the Company when employment ended", xlab = "Number of Years at the Company", ylab = "Number of employees lost")
summary(notworking$Age)
summary(notworking$YearsAtCompany)
t.test(notworking$Age)
t.test(notworking$YearsAtCompany)
hist(working$Age, main = "Age when employment ended", xlab = "Age", ylab = "Number of employees remaining")
hist(working$YearsAtCompany, main = "Years at the Company when this data was taken", xlab = "Number of Years at the Company", ylab = "Number of employees lost")
summary(working$Age)
summary(working$YearsAtCompany)
hist(working$Age, main = "Age when data was recorded", xlab = "Age", ylab = "Number of employees remaining")
hist(working$YearsAtCompany, main = "Years at the Company when this data was recorded", xlab = "Number of Years at the Company", ylab = "Number of employees lost")
summary(working$Age)
summary(working$YearsAtCompany)
hist(working$Age, main = "Age when data was recorded", xlab = "Age", ylab = "Number of employees remaining")
hist(working$YearsAtCompany, main = "Years at the Company when this data was recorded", xlab = "Number of Years at the Company", ylab = "Number of employees remaining")
summary(working$Age)
summary(working$YearsAtCompany)
t.test(working$Age)
t.test(working$YearsAtCompany)
values <- c(ID,Age,Attrition,BusinessTravel,DailyRate,Department,DistanceFromHome,Education,EducationField,EmployeeCount,EmployeeNumber,EnvironmentSatisfaction,Gender,HourlyRate,JobInvolvement,JobLevel,JobRole,JobSatisfaction,MaritalStatus,MonthlyIncome,MonthlyRate,NumCompaniesWorked,Over18,OverTime,PercentSalaryHike,PerformanceRating,RelationshipSatisfaction,StandardHours,StockOptionLevel,TotalWorkingYears,TrainingTimesLastYear,WorkLifeBalance,YearsAtCompany,YearsInCurrentRole,YearsSinceLastPromotion,YearsWithCurrManager)
values <- notworking %>% c(ID,Age,Attrition,BusinessTravel,DailyRate,Department,DistanceFromHome,Education,EducationField,EmployeeCount,EmployeeNumber,EnvironmentSatisfaction,Gender,HourlyRate,JobInvolvement,JobLevel,JobRole,JobSatisfaction,MaritalStatus,MonthlyIncome,MonthlyRate,NumCompaniesWorked,Over18,OverTime,PercentSalaryHike,PerformanceRating,RelationshipSatisfaction,StandardHours,StockOptionLevel,TotalWorkingYears,TrainingTimesLastYear,WorkLifeBalance,YearsAtCompany,YearsInCurrentRole,YearsSinceLastPromotion,YearsWithCurrManager)
notworking$ID
unique(notworking$BusinessTravel)
unique(notworking$Department)
unique(notworking$EducationField)
unique(notworking$JobRole)
unique(notworking$Gender)
unique(notworking$Attrition)
unique(notworking$MaritalStatus)
unique(notworking$OverTime)
unique(notworking$Over18)
unique(notworking$StandardHours)
notworking$BusinessTravel
notworking$BusinessTravel <- str_replace(notworking$BusinessTravel,"Travel_Rarely", "1")
notworking$BusinessTravel <- str_replace(notworking$BusinessTravel,"Travel_Frequently", "2")
notworking$BusinessTravel <- str_replace(notworking$BusinessTravel,"Non-Travel", "0")
notworking$BusinessTravel
notworking$Department <- str_replace(notworking$Department,"Sales", "0")
notworking$Department <- str_replace(notworking$Department,"Research & Development", "1")
notworking$Department <- str_replace(notworking$Department,"Human Resources", "2")
notworking$Department
notworking$EducationField <- str_replace(notworking$EducationField,"Marketing", "0")
notworking$EducationField <- str_replace(notworking$EducationField,"Life Sciences", "1")
notworking$EducationField <- str_replace(notworking$EducationField,"Medical", "2")
notworking$EducationField <- str_replace(notworking$EducationField,"Other", "3")
notworking$EducationField <- str_replace(notworking$EducationField,"Technical Degree", "4")
notworking$EducationField <- str_replace(notworking$EducationField,"Human Resources", "5")
notworking$EducationField
notworking$JobRole <- str_replace(notworking$JobRole,"Sales Executive", "0")
notworking$JobRole <- str_replace(notworking$JobRole,"Sales Representative", "1")
notworking$JobRole <- str_replace(notworking$JobRole,"Research Scientist", "2")
notworking$JobRole <- str_replace(notworking$JobRole,"Laboratory Technician", "3")
notworking$JobRole <- str_replace(notworking$JobRole,"Manufacturing Director", "4")
notworking$JobRole <- str_replace(notworking$JobRole,"Healthcare Representative", "5")
notworking$JobRole <- str_replace(notworking$JobRole,"Manager", "6")
notworking$JobRole <- str_replace(notworking$JobRole,"Human Resources", "7")
notworking$JobRole
notworking$JobRole <- str_replace(notworking$JobRole,"Research Director", "8")
notworking$JobRole
notworking$Gender <- str_replace(notworking$Gender,"Female", "1")
notworking$Gender <- str_replace(notworking$Gender,"Male", "0")
notworking$Gender
notworking$Attrition <- str_replace(notworking$Attrition,"Yes", "1")
notworking$Attrition
notworking$MaritalStatus <- str_replace(notworking$MaritalStatus,"Single", "0")
notworking$MaritalStatus <- str_replace(notworking$MaritalStatus,"Married", "1")
notworking$MaritalStatus <- str_replace(notworking$MaritalStatus,"Divorced", "2")
notworking$MaritalStatus
notworking$Over18 <- str_replace(notworking$Over18,"Yes", "1")
notworking$Over18
notworking$Over18 <- str_replace(notworking$Over18,"Yes", "1")
View(notworking)
notworking$OverTime <- str_replace(notworking$OverTime,"Yes", "1")
notworking$OverTime <- str_replace(notworking$OverTime,"No", "0")
View(notworking)
notworking$Over18 <- str_replace(notworking$Over18,"Y", "1")
View(notworking)
summary(notworking)
notworking$Attrition <- as.numeric(notworking$Attrition)
notworking$BusinessTravel <- as.numeric(notworking$BusinessTravel)
notworking$Department <- as.numeric(notworking$Department)
notworking$EducationField <- as.numeric(notworking$EducationField)
notworking$Gender <- as.numeric(notworking$Gender)
notworking$JobRole <- as.numeric(notworking$JobRole)
notworking$MaritalStatus <- as.numeric(notworking$MaritalStatus)
notworking$Over18 <- as.numeric(notworking$Over18)
notworking$OverTime <- as.numeric(notworking$OverTime)
summary(notworking)
hist(working$BusinessTravel)
hist(working$BusinessTravel)
hist(notworking$BusinessTravel)
summary(notworking$BusinessTravel)
hist(notworking$DailyRate)
summary(notworking$DailyRate)
hist(notworking$Department)
summary(notworking$Department)
hist(notworking$DistanceFromHome)
summary(notworking$DistanceFromHome)
hist(notworking$Education)
summary(notworking$Education)
hist(notworking$EducationField)
summary(notworking$EducationField)
hist(notworking$EmployeeNumber)
summary(notworking$EmployeeNumber)
hist(notworking$EnvironmentSatisfaction)
summary(notworking$EnvironmentSatisfaction)
hist(notworking$Gender)
summary(notworking$Gender)
hist(notworking$HourlyRate)
summary(notworking$HourlyRate)
hist(notworking$JobInvolvement)
summary(notworking$JobInvolvement)
hist(notworking$JobLevel)
summary(notworking$JobLevel)
hist(notworking$JobRole)
summary(notworking$JobRole)
hist(notworking$JobSatisfaction)
summary(notworking$JobSatisfaction)
hist(notworking$MaritalStatus)
summary(notworking$MaritalStatus)
hist(notworking$MonthlyIncome)
summary(notworking$MonthlyIncome)
hist(notworking$MonthlyRate)
summary(notworking$MonthlyRate)
hist(notworking$NumCompaniesWorked)
summary(notworking$NumCompaniesWorked)
hist(notworking$OverTime)
summary(notworking$OverTime)
hist(notworking$PercentSalaryHike)
summary(notworking$PercentSalaryHike)
hist(notworking$PerformanceRating)
summary(notworking$PerformanceRating)
hist(notworking$RelationshipSatisfaction)
summary(notworking$RelationshipSatisfaction)
hist(notworking$StockOptionLevel)
summary(notworking$StockOptionLevel)
hist(notworking$TotalWorkingYears)
summary(notworking$TotalWorkingYears)
hist(notworking$TrainingTimesLastYear)
summary(notworking$TrainingTimesLastYear)
hist(notworking$WorkLifeBalance)
summary(notworking$WorkLifeBalance)
hist(notworking$YearsAtCompany)
summary(notworking$YearsAtCompany)
hist(notworking$YearsInCurrentRole)
summary(notworking$YearsInCurrentRole)
hist(notworking$YearsSinceLastPromotion)
summary(notworking$YearsSinceLastPromotion)
hist(notworking$YearsWithCurrManager)
summary(notworking$YearsWithCurrManager)
savehistory("C:/Users/tgarn/OneDrive/Desktop/SMU - MS Data Science/Courses/GitHub/DS_6306_weekly_assignments/Project_2/CaseStudy2DDS/Unsaved Work/CaseStudy2.Rhistory")
